<header>
    <h1 class="section_h" id="haskells-algebraic-data-types-and-universal-algebra">Peano Algebras in Haskell</h1>
</header>
<p>
    <a
	href="https://en.wikipedia.org/wiki/Universal_algebra">Universal
	algebra</a> is a field of mathematics which deals with
    general algebraic structures. Much of classical algebra is
    about groups (e.g. integers with addition, or rotations of
    a plane), rings (e.g. the ring of integers with addition
    and multiplication), fields (e.g. real numbers, or complex
    numbers, where one multiplicative inverses of non
    0 elements exists).  Universal algebra deals with more
    general structures like that. Every algebra has the
    underlying universum - a set of <code>numbers</code> and
    a set of operations. The operations can have different
    arity, i.e. number of arguments. Examples include constants
    - operations of arity 0, or multiplication, addition of
    integers - arity 2, or inverse - arity 1.
</p>
<h2 id="peano-algebras">Peano algebras</h2>
<p>
    Let’s take as an example the algebra of natural numbers
    using <a href="https://en.wikipedia.org/wiki/Peano_axioms">Peano axioms</a>.
    It has one constant - let’s call it $0$ and one
    operation of arity 1 - the successor function
    $s$.  In Universal Algebra one can consider all
    of the algebras which has this set of operations and
    satisfies the Peano axioms, but let us skip the following
    two:
</p>
<ul>
    <li>
	<p>the injectivity axiom of $s$:</p>
	$$  s(m) = s(n) \Rightarrow m = n $$
    </li>
    <li><p><code>0</code> is not a successor of any element:</p>
	$$ \not\exists_n s(n) = 0 $$
    </li>
</ul>
<p>
    Otherwise there would be only one algebra to consider
    - natural numbers – at the end Peano was looking for 
    axiomatic formulation of natural numbers, hence the two
    requirements.
</p>
<p>
    Let us call algebras which satisfy these axioms
    <strong>Peano algebras</strong>. One example is the set of
    <em>natural numbers</em> $\mathbb{N}$, where the successor
    is defined as $s(n) = n + 1$. This is a <em>free
	algebra</em> with one generator. What it really means
    is that all elements can be generated from $0$
    and the operation $s$, and that there is no
    relation/equations between elements. A non free example
    would be the set of $\mathbb{N}/2\mathbb{N} \simeq \{0,1\}$,
    where $s(0) = 1$ and $s(1) = 0$ (this breaks the two
    original Peano axioms that that we excluded).
</p>
<h2 id="peano-algebras-in-haskell">Peano algebras in Haskell</h2>
<p>
    It turns out that Peano algebras are often met in Haskell
    code. Let’s take Haskell's <code>Maybe</code>
    <a href="https://wiki.haskell.org/Maybe">type</a>.  It has
    two constructors <code>Nothing</code> and
    <code>Just</code>, where <code>Nothing</code> has kind $*$ (arity
    0) and <code>Just</code> has kind $*\rightarrow *$ (arity
    1); like $0$ and $s$ in the Peano algebra case.  And indeed
    it forms a
    <a href="https://en.wikipedia.org/wiki/Peano_axioms">Peano Algebra</a>,
    for any type $a$. It’s elements are:
</p>
<pre class="haskell">Unit, Maybe Unit, Maybe (Maybe Unit), ...</pre>
<p>
    This algebra is free, there are no relations (or equalities
    of types) among all algebras of this type. But relations
    are very useful, and it turns out that Haskell provides
    them using monads. For example for the <code>Maybe</code>
    type we have
</p>
<pre class="haskell">(Just (Just x) &gt;&gt;= id) == Just x</pre>
<p>
    for every <code>x :: a</code>. Note that this equation is
    on the level of terms rather than types.
</p>
<p>
    This way when you use <code>Maybe</code> in a monadic
    context you use it as $\mathbb{N}/2\mathbb{N}$ rather than
    the free algebra $\mathbb{N}$.  Knowing these relations is
    the essence of knowing how a given monad works.
</p>
<p>
    There are other examples of a Peano algebras in Haskell.
    The <a href="https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Either.html">Either monad</a>
    provides an example with two generators - or two data constructors
    <code>Left</code> and <code>Right</code>. As a Peano algebra it can be
    represented as a binary tree where the successor of
    <code>Right x</code> is <code>Right (Right x)</code> and
    the successor of <code>Left x</code> is
    <code>Left (Left x)</code> (for some type <code>x</code>). Then the
    <code>Either</code> monad provides only one relation:
</p>
<pre class="haskell">(Right (Right x) &gt;&gt;= id) == Right x</pre>
<p>
    and there is no relation for the <code>Left</code>
    constructor:
</p>
<pre class="haskell">(Left (x :: Either a) &gt;&gt;= id) == Left x</pre>
<p>
    for every term <code>x :: a</code>. The corresponding Peano
    algebra has the form:
</p>
<div class="diagram">
    <img src="/images/either-peano.png" alt="diagram" width="450"/>
</div>
